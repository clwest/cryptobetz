# Generated by Django 4.1.7 on 2023-03-22 19:23

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="BlockchainSiteURL",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("url", models.URLField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Coin",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=300)),
                ("description", models.TextField()),
                ("symbol", models.CharField(max_length=100)),
                (
                    "asset_platform_id",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("logo_url", models.URLField()),
                ("url", models.URLField()),
                (
                    "sentiment_votes_up_percentage",
                    models.FloatField(blank=True, null=True),
                ),
                (
                    "sentiment_votes_down_percentage",
                    models.FloatField(blank=True, null=True),
                ),
                ("coingecko_rank", models.IntegerField(blank=True, null=True)),
                ("coingecko_score", models.FloatField(blank=True, null=True)),
                ("liquidity_score", models.FloatField(blank=True, null=True)),
                ("public_interest_score", models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="CoinCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name="CoinPlatform",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                ("platform_id", models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name="Exchange",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("country", models.CharField(blank=True, max_length=200, null=True)),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="Description"),
                ),
                ("url", models.URLField()),
                ("twitter_handle", models.CharField(max_length=500, null=True)),
                ("facebook_url", models.URLField(max_length=500, null=True)),
                ("telegram_url", models.URLField(max_length=500, null=True)),
                ("centralized", models.BooleanField()),
                ("trust_score", models.IntegerField(null=True)),
                ("trust_score_rank", models.IntegerField()),
                (
                    "trade_volume_24h_btc",
                    models.DecimalField(decimal_places=10, max_digits=20),
                ),
                (
                    "trade_volume_24h_btc_normalized",
                    models.DecimalField(decimal_places=10, max_digits=20),
                ),
            ],
            options={
                "verbose_name": "Exchange",
                "verbose_name_plural": "Exchanges",
            },
        ),
        migrations.CreateModel(
            name="HomepageURL",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("url", models.URLField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="NewCoin",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("symbol", models.CharField(max_length=10)),
                ("coingecko_id", models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name="NFTS",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("contract_address", models.CharField(max_length=255, null=True)),
                ("image_url", models.URLField()),
                ("asset_platform", models.CharField(max_length=50)),
                ("native_currency", models.CharField(max_length=50)),
                ("description", models.TextField()),
                ("total_supply", models.FloatField(blank=True, null=True)),
                ("unique_address", models.FloatField(blank=True, null=True)),
                ("market_cap", models.FloatField()),
                ("volume_24h", models.FloatField()),
                ("floor_price", models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name="CoinDeveloperData",
            fields=[
                (
                    "description",
                    models.TextField(
                        blank=True, null=True, verbose_name="Developer Data"
                    ),
                ),
                (
                    "coin",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="developer_data",
                        serialize=False,
                        to="coingecko.coin",
                    ),
                ),
                (
                    "forks",
                    models.IntegerField(blank=True, null=True, verbose_name="Forks"),
                ),
                (
                    "stars",
                    models.IntegerField(blank=True, null=True, verbose_name="Stars"),
                ),
                (
                    "subscribers",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Subscribers"
                    ),
                ),
                (
                    "total_issues",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Total Issues"
                    ),
                ),
                (
                    "closed_issues",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Closed Issues"
                    ),
                ),
                (
                    "pull_requests_merged",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Pull Requests"
                    ),
                ),
                (
                    "pull_request_contributors",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Pull Requests Contributors"
                    ),
                ),
                (
                    "code_additions",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Code Additions"
                    ),
                ),
                (
                    "code_deletions",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Code Deletions"
                    ),
                ),
                (
                    "commit_count_4_weeks",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Commit Count (4 weeks)"
                    ),
                ),
                (
                    "developer_score",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Developer Score"
                    ),
                ),
                ("repos_url", models.JSONField(blank=True, default=list, null=True)),
            ],
            options={
                "verbose_name": "Developer Data",
            },
        ),
        migrations.CreateModel(
            name="CoinMarketData",
            fields=[
                (
                    "coin",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="coingecko.coin",
                    ),
                ),
                ("current_price", models.FloatField()),
                (
                    "total_value_locked_btc",
                    models.DecimalField(decimal_places=8, max_digits=20, null=True),
                ),
                (
                    "total_value_locked_usd",
                    models.DecimalField(decimal_places=2, max_digits=20, null=True),
                ),
                ("ath", models.FloatField()),
                ("ath_date", models.DateField(blank=True, null=True)),
                ("atl", models.FloatField()),
                ("atl_date", models.DateField(blank=True, null=True)),
                (
                    "market_cap",
                    models.DecimalField(decimal_places=8, max_digits=20, null=True),
                ),
                ("market_cap_rank", models.IntegerField(blank=True, null=True)),
                ("fully_diluted_valuation", models.FloatField()),
                ("total_volume", models.FloatField()),
                ("high_24h", models.FloatField()),
                ("low_24h", models.FloatField()),
                ("circulating_supply", models.FloatField()),
                ("last_updated", models.DateTimeField(blank=True, null=True)),
                ("max_supply", models.FloatField(blank=True, null=True)),
                ("price_change_24h", models.FloatField()),
                (
                    "price_change_percentage_24h",
                    models.FloatField(blank=True, null=True),
                ),
                (
                    "price_change_percentage_1h",
                    models.FloatField(blank=True, null=True),
                ),
                (
                    "price_change_percentage_7d",
                    models.FloatField(blank=True, null=True),
                ),
                (
                    "price_change_percentage_14d",
                    models.FloatField(blank=True, null=True),
                ),
                (
                    "price_change_percentage_30d",
                    models.FloatField(blank=True, null=True),
                ),
                (
                    "price_change_percentage_60d",
                    models.FloatField(blank=True, null=True),
                ),
                (
                    "price_change_percentage_200d",
                    models.FloatField(blank=True, null=True),
                ),
                (
                    "price_change_percentage_1y",
                    models.FloatField(blank=True, null=True),
                ),
                ("total_supply", models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Index",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("constituents", models.ManyToManyField(to="coingecko.coin")),
            ],
        ),
        migrations.CreateModel(
            name="Derivative",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "open_interest_btc",
                    models.DecimalField(
                        blank=True, decimal_places=20, max_digits=30, null=True
                    ),
                ),
                ("volume_24h", models.DecimalField(decimal_places=10, max_digits=20)),
                (
                    "number_of_perpetual_pairs",
                    models.IntegerField(blank=True, null=True),
                ),
                ("number_of_futures_pairs", models.IntegerField(null=True)),
                ("image", models.URLField(null=True)),
                ("country", models.CharField(max_length=50, null=True)),
                ("year_established", models.DateTimeField(auto_now_add=True)),
                ("url", models.URLField(null=True)),
                (
                    "underlying_asset",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="coingecko.coin",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="coin",
            name="categories",
            field=models.ManyToManyField(
                related_name="coins", to="coingecko.coincategory"
            ),
        ),
        migrations.AddField(
            model_name="coin",
            name="platform",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="coins",
                to="coingecko.coinplatform",
            ),
        ),
        migrations.CreateModel(
            name="Ticker",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("base", models.CharField(max_length=200)),
                ("target", models.CharField(max_length=200)),
                ("market_name", models.CharField(max_length=200)),
                ("has_trading_incentive", models.BooleanField()),
                ("last", models.DecimalField(decimal_places=10, max_digits=20)),
                ("volume", models.DecimalField(decimal_places=10, max_digits=20)),
                (
                    "converted_last_btc",
                    models.DecimalField(decimal_places=10, max_digits=20),
                ),
                (
                    "converted_last_eth",
                    models.DecimalField(decimal_places=18, max_digits=20),
                ),
                (
                    "converted_last_usd",
                    models.DecimalField(decimal_places=10, max_digits=20),
                ),
                (
                    "converted_volume_btc",
                    models.DecimalField(decimal_places=10, max_digits=20),
                ),
                (
                    "converted_volume_eth",
                    models.DecimalField(decimal_places=10, max_digits=20),
                ),
                (
                    "converted_volume_usd",
                    models.DecimalField(decimal_places=10, max_digits=20),
                ),
                (
                    "trust_score",
                    models.TextField(blank=True, max_length=200, null=True),
                ),
                (
                    "bid_ask_spread_percentage",
                    models.DecimalField(
                        blank=True, decimal_places=5, max_digits=10, null=True
                    ),
                ),
                ("timestamp", models.DateTimeField()),
                ("last_traded_at", models.DateTimeField()),
                ("last_fetch_at", models.DateTimeField()),
                ("trade_url", models.URLField(blank=True, null=True)),
                ("token_info_url", models.URLField(blank=True, null=True)),
                (
                    "target_coin_id",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                (
                    "coin",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="coingecko.coin",
                    ),
                ),
                (
                    "exchange",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="coingecko.exchange",
                    ),
                ),
            ],
            options={
                "unique_together": {("coin", "exchange")},
            },
        ),
        migrations.CreateModel(
            name="CoinCommunityData",
            fields=[
                (
                    "coin",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="community_data",
                        serialize=False,
                        to="coingecko.coin",
                    ),
                ),
                ("chat_url", models.URLField(blank=True, max_length=255, null=True)),
                (
                    "twitter_screen_name",
                    models.CharField(
                        blank=True, max_length=255, null=True, unique=True
                    ),
                ),
                ("twitter_followers", models.IntegerField(blank=True, null=True)),
                (
                    "telegram_channel_identifier",
                    models.CharField(
                        blank=True, max_length=255, null=True, unique=True
                    ),
                ),
                (
                    "telegram_channel_user_count",
                    models.IntegerField(blank=True, null=True),
                ),
                ("community_score", models.FloatField(blank=True, null=True)),
                (
                    "blockchain_site",
                    models.ManyToManyField(
                        related_name="coins", to="coingecko.blockchainsiteurl"
                    ),
                ),
                (
                    "homepage",
                    models.ManyToManyField(
                        related_name="coins", to="coingecko.homepageurl"
                    ),
                ),
            ],
        ),
    ]
