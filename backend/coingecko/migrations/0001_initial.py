# Generated by Django 4.1.7 on 2023-03-19 01:28

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Cryptocurrency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('description', models.TextField()),
                ('symbol', models.CharField(max_length=100)),
                ('categories', models.TextField()),
                ('market_cap', models.FloatField()),
                ('current_price', models.FloatField()),
                ('total_volume', models.FloatField()),
                ('circulating_supply', models.FloatField()),
                ('total_supply', models.FloatField(blank=True, null=True)),
                ('max_supply', models.FloatField(blank=True, null=True)),
                ('price_change_percentage_24h', models.FloatField(blank=True, null=True)),
                ('ath', models.FloatField()),
                ('ath_date', models.DateField(blank=True, null=True)),
                ('atl', models.FloatField()),
                ('atl_date', models.DateField(blank=True, null=True)),
                ('last_updated', models.DateTimeField(blank=True, null=True)),
                ('logo_url', models.URLField()),
                ('website', models.URLField()),
                ('twitter_handle', models.CharField(max_length=100)),
                ('reddit_url', models.URLField(blank=True, null=True)),
                ('facebook_likes', models.IntegerField(blank=True, null=True)),
                ('twitter_followers', models.IntegerField(blank=True, null=True)),
                ('reddit_average_posts_48h', models.IntegerField(blank=True, null=True)),
                ('reddit_average_comments_48h', models.IntegerField(blank=True, null=True)),
                ('reddit_subscribers', models.IntegerField(blank=True, null=True)),
                ('reddit_accounts_active_48h', models.IntegerField(blank=True, null=True)),
                ('telegram_channel_user_count', models.IntegerField(blank=True, null=True)),
                ('forks', models.IntegerField(blank=True, null=True)),
                ('stars', models.IntegerField(blank=True, null=True)),
                ('subscribers', models.IntegerField(blank=True, null=True)),
                ('total_issues', models.IntegerField(blank=True, null=True)),
                ('closed_issues', models.IntegerField(blank=True, null=True)),
                ('pull_requests_merged', models.IntegerField(blank=True, null=True)),
                ('pull_request_contributors', models.IntegerField(blank=True, null=True)),
                ('code_additions', models.IntegerField(blank=True, null=True)),
                ('code_deletions', models.IntegerField(blank=True, null=True)),
                ('commit_count_4_weeks', models.IntegerField(blank=True, null=True)),
                ('sentiment_votes_up_percentage', models.FloatField(blank=True, null=True)),
                ('sentiment_votes_down_percentage', models.FloatField(blank=True, null=True)),
                ('market_cap_rank', models.IntegerField(blank=True, null=True)),
                ('coingecko_rank', models.IntegerField(blank=True, null=True)),
                ('coingecko_score', models.FloatField(blank=True, null=True)),
                ('developer_score', models.FloatField(blank=True, null=True)),
                ('community_score', models.FloatField(blank=True, null=True)),
                ('liquidity_score', models.FloatField(blank=True, null=True)),
                ('public_interest_score', models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='NewCoin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('symbol', models.CharField(max_length=10)),
                ('coingecko_id', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='NFTS',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('contract_address', models.CharField(max_length=255)),
                ('image_url', models.URLField()),
                ('asset_platform', models.CharField(max_length=50)),
                ('native_currency', models.CharField(max_length=50)),
                ('description', models.TextField()),
                ('total_supply', models.FloatField(blank=True, null=True)),
                ('unique_address', models.FloatField(blank=True, null=True)),
                ('market_cap', models.FloatField()),
                ('volume_24h', models.FloatField()),
                ('floor_price', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='Ticker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('base', models.CharField(max_length=200)),
                ('target', models.CharField(max_length=200)),
                ('market_name', models.CharField(max_length=200)),
                ('market_identifier', models.CharField(max_length=200)),
                ('has_trading_incentive', models.BooleanField()),
                ('last', models.DecimalField(decimal_places=10, max_digits=20)),
                ('volume', models.DecimalField(decimal_places=10, max_digits=20)),
                ('converted_last_btc', models.DecimalField(decimal_places=10, max_digits=20)),
                ('converted_last_eth', models.DecimalField(decimal_places=10, max_digits=20)),
                ('converted_last_usd', models.DecimalField(decimal_places=10, max_digits=20)),
                ('converted_volume_btc', models.DecimalField(decimal_places=10, max_digits=20)),
                ('converted_volume_eth', models.DecimalField(decimal_places=10, max_digits=20)),
                ('converted_volume_usd', models.DecimalField(decimal_places=10, max_digits=20)),
                ('trust_score', models.CharField(max_length=200, null=True)),
                ('bid_ask_spread_percentage', models.DecimalField(decimal_places=5, max_digits=10, null=True)),
                ('timestamp', models.DateTimeField()),
                ('last_traded_at', models.DateTimeField()),
                ('last_fetch_at', models.DateTimeField()),
                ('is_anomaly', models.BooleanField()),
                ('is_stale', models.BooleanField(blank=True, null=True)),
                ('trade_url', models.URLField(null=True)),
                ('token_info_url', models.URLField(null=True)),
                ('coin_id', models.CharField(max_length=200)),
                ('target_coin_id', models.CharField(max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Index',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('constituents', models.ManyToManyField(to='coingecko.cryptocurrency')),
            ],
        ),
        migrations.CreateModel(
            name='Exchange',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('country', models.CharField(blank=True, max_length=200, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('url', models.URLField()),
                ('twitter_handle', models.CharField(max_length=500, null=True)),
                ('facebook_url', models.URLField(max_length=500, null=True)),
                ('telegram_url', models.URLField(max_length=500, null=True)),
                ('reddit_url', models.URLField(max_length=500, null=True)),
                ('slack_url', models.URLField(max_length=500, null=True)),
                ('other_url1', models.URLField(max_length=500, null=True)),
                ('other_url2', models.URLField(max_length=500, null=True)),
                ('centralized', models.BooleanField()),
                ('trust_score', models.IntegerField(null=True)),
                ('trust_score_rank', models.IntegerField()),
                ('trade_volume_24h_btc', models.DecimalField(decimal_places=10, max_digits=20)),
                ('trade_volume_24h_btc_normalized', models.DecimalField(decimal_places=10, max_digits=20)),
                ('tickers', models.ManyToManyField(related_name='exchanges', to='coingecko.ticker')),
            ],
        ),
        migrations.CreateModel(
            name='Derivative',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('open_interest_btc', models.DecimalField(blank=True, decimal_places=20, max_digits=30, null=True)),
                ('volume_24h', models.DecimalField(decimal_places=10, max_digits=20)),
                ('number_of_perpetual_pairs', models.IntegerField(blank=True, null=True)),
                ('number_of_futures_pairs', models.IntegerField(null=True)),
                ('image', models.URLField(null=True)),
                ('country', models.CharField(max_length=50, null=True)),
                ('year_established', models.DateTimeField(auto_now_add=True)),
                ('url', models.URLField(null=True)),
                ('underlying_asset', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='coingecko.cryptocurrency')),
            ],
        ),
    ]
